%implements s1_b0_qig7g_Update "C"

%function Update(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T *lastU;
%closefile localVarDecl
%assign tlcUpdateFcnOfS1B5 = OpaqueTLCBlockFcn("Update", 1, 5, 0, 5)
if (%<(SLibCGIRIsSampleHit(3, 1))>) {
    /* Update for RandomNumber: '<Root>/Ruído na leitura do encoder' */
    MPCSmallSize_DW.NextOutput = %<(SLibCGCallSubFcn("rt_nrand_Upu32_Yd_f_pw_snf", ["&MPCSmallSize_DW.RandSeed"], 0, 5, 0))> * MPCSmallSize_P.Rudonaleituradoencoder_StdDev + MPCSmallSize_P.Rudonaleituradoencoder_Mean;
}
if (%<(SLibCGIRIsSampleHit(2, 1))>) {
    /* Update for UnitDelay: '<S1>/Armazena u(k-1)' */
    MPCSmallSize_DW.Armazenauk1_DSTATE[0] = MPCSmallSize_B.uk[0];
    MPCSmallSize_DW.Armazenauk1_DSTATE[1] = MPCSmallSize_B.uk[1];
    MPCSmallSize_DW.Armazenauk1_DSTATE[2] = MPCSmallSize_B.uk[2];
}
/* Update for Derivative: '<Root>/Derivative' incorporates:
 *  Constant: '<Root>/PHIref'
 */
if (MPCSmallSize_DW.TimeStampA == %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>) {
    MPCSmallSize_DW.TimeStampA = %<(SLibCG_SE(LibGetT()))>;
    lastU = &MPCSmallSize_DW.LastUAtTimeA;
} else if (MPCSmallSize_DW.TimeStampB == %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>) {
    MPCSmallSize_DW.TimeStampB = %<(SLibCG_SE(LibGetT()))>;
    lastU = &MPCSmallSize_DW.LastUAtTimeB;
} else if (MPCSmallSize_DW.TimeStampA < MPCSmallSize_DW.TimeStampB) {
    MPCSmallSize_DW.TimeStampA = %<(SLibCG_SE(LibGetT()))>;
    lastU = &MPCSmallSize_DW.LastUAtTimeA;
} else {
    MPCSmallSize_DW.TimeStampB = %<(SLibCG_SE(LibGetT()))>;
    lastU = &MPCSmallSize_DW.LastUAtTimeB;
}
*lastU = MPCSmallSize_P.PHIref_Value;
/* End of Update for Derivative: '<Root>/Derivative' */
if (%<(SLibCGIRIsSampleHit(2, 1))>) {
%if !WHITE_SPACE(tlcUpdateFcnOfS1B5)
    /* Update for S-Function (mpc_ss_du_mimo): '<S1>/Controlador' */
%<tlcUpdateFcnOfS1B5>\
%endif
}
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedUpdateLocalVars", localVarDecl)>
%endfunction
%function UpdateFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Update(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 5, fcnProtoType)>
%endfunction
