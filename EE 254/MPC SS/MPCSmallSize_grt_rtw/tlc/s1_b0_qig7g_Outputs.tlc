%implements s1_b0_qig7g_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T currentTime;
real_T currentTime_0;
real_T currentTime_1;
int_T iy;
real_T *lastU;
real_T rtb_Sum2[3];
real_T tmp[3];
real_T rtb_uk1_idx_0;
real_T rtb_uk1_idx_1;
real_T rtb_uk1_idx_2;
%closefile localVarDecl
%assign tlcOutputsFcnOfS1B0 = OpaqueTLCBlockFcn("Outputs", 1, 0, 0, 4)
%assign tlcOutputsFcnOfS1B1 = OpaqueTLCBlockFcn("Outputs", 1, 1, 0, 4)
%assign tlcOutputsFcnOfS1B5 = OpaqueTLCBlockFcn("Outputs", 1, 5, 0, 4)
%assign tlcOutputsFcnOfS1B6 = OpaqueTLCBlockFcn("Outputs", 1, 6, 0, 4)
/* Step: '<Root>/Perturbação de Entrada X1' */
currentTime = %<(SLibCG_SE(LibGetTaskTime(0)))>;
/* Step: '<Root>/Perturbação de Entrada Y1' */
currentTime_0 = %<(SLibCG_SE(LibGetTaskTime(0)))>;
/* Step: '<Root>/Perturbação de Entrada PHI1' */
currentTime_1 = %<(SLibCG_SE(LibGetTaskTime(0)))>;
/* Gain: '<Root>/  1' incorporates:
 *  Step: '<Root>/Perturbação de Entrada X1'
 */
if (currentTime < MPCSmallSize_P.PerturbaodeEntradaX1_Time) {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaX1_Y0;
} else {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaX1_YFinal;
}
/* Sum: '<Root>/Sum2' incorporates:
 *  Gain: '<Root>/  1'
 */
tmp[0] = MPCSmallSize_P.u_Gain * currentTime;
/* Gain: '<Root>/ 2' incorporates:
 *  Step: '<Root>/Perturbação de Entrada Y1'
 */
if (currentTime_0 < MPCSmallSize_P.PerturbaodeEntradaY1_Time) {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaY1_Y0;
} else {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaY1_YFinal;
}
/* Sum: '<Root>/Sum2' incorporates:
 *  Gain: '<Root>/ 2'
 */
tmp[1] = MPCSmallSize_P.u_Gain_a * currentTime;
/* Gain: '<Root>/ 3' incorporates:
 *  Step: '<Root>/Perturbação de Entrada PHI1'
 */
if (currentTime_1 < MPCSmallSize_P.PerturbaodeEntradaPHI1_Time) {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaPHI1_Y0;
} else {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaPHI1_YFinal;
}
/* Sum: '<Root>/Sum2' incorporates:
 *  Gain: '<Root>/ 3'
 */
tmp[2] = MPCSmallSize_P.u_Gain_b * currentTime;
for (iy = 0; iy < 3; iy++) {
    /* Sum: '<Root>/Sum2' incorporates:
 *  StateSpace: '<S2>/Equacao de Estado'
 */
    currentTime = tmp[iy] + (MPCSmallSize_P.EquacaodeEstado_C[6 + iy] * MPCSmallSize_X.EquacaodeEstado_CSTATE[2] + (MPCSmallSize_P.EquacaodeEstado_C[3 + iy] * MPCSmallSize_X.EquacaodeEstado_CSTATE[1] + MPCSmallSize_P.EquacaodeEstado_C[iy] * MPCSmallSize_X.EquacaodeEstado_CSTATE[0]));
    /* StateSpace: '<S2>/Equacao de Estado' */
    rtb_Sum2[iy] = currentTime;
}
/* Gain: '<S4>/Equacao de saida' */
for (iy = 0; iy < 3; iy++) {
    MPCSmallSize_B.Equacaodesaida[iy] = 0.0;
    MPCSmallSize_B.Equacaodesaida[iy] += MPCSmallSize_P.C[iy] * rtb_Sum2[0];
    MPCSmallSize_B.Equacaodesaida[iy] += MPCSmallSize_P.C[iy + 3] * rtb_Sum2[1];
    MPCSmallSize_B.Equacaodesaida[iy] += MPCSmallSize_P.C[iy + 6] * rtb_Sum2[2];
}
/* End of Gain: '<S4>/Equacao de saida' */
if (%<(SLibCGIRIsSampleHit(1, 1))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS1B0)
    /* Scope: '<Root>/ x (amarelo)  y (roxo)  phi (azul)' */
%<tlcOutputsFcnOfS1B0>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS1B1)
    /* ToWorkspace: '<Root>/To Workspace1' */
%<tlcOutputsFcnOfS1B1>\
%endif
}
if (%<(SLibCGIRIsSampleHit(3, 1))>) {
    /* Gain: '<Root>/ 4' incorporates:
 *  RandomNumber: '<Root>/Ruído na leitura do encoder'
 */
    MPCSmallSize_B.u = MPCSmallSize_P.u_Gain_h * MPCSmallSize_DW.NextOutput;
}
/* Sum: '<Root>/Sum3' */
MPCSmallSize_B.Sum3[0] = rtb_Sum2[0] + MPCSmallSize_B.u;
MPCSmallSize_B.Sum3[1] = rtb_Sum2[1] + MPCSmallSize_B.u;
MPCSmallSize_B.Sum3[2] = rtb_Sum2[2] + MPCSmallSize_B.u;
if (%<(SLibCGIRIsSampleHit(2, 1))>) {
    /* UnitDelay: '<S1>/Armazena u(k-1)' */
    rtb_uk1_idx_0 = MPCSmallSize_DW.Armazenauk1_DSTATE[0];
    rtb_uk1_idx_1 = MPCSmallSize_DW.Armazenauk1_DSTATE[1];
    rtb_uk1_idx_2 = MPCSmallSize_DW.Armazenauk1_DSTATE[2];
}
/* Derivative: '<Root>/Derivative' incorporates:
 *  Constant: '<Root>/PHIref'
 */
if ((MPCSmallSize_DW.TimeStampA >= %<(SLibCG_SE(LibGetT()))>) && (MPCSmallSize_DW.TimeStampB >= %<(SLibCG_SE(LibGetT()))>)) {
    MPCSmallSize_B.Derivative = 0.0;
} else {
    currentTime = MPCSmallSize_DW.TimeStampA;
    lastU = &MPCSmallSize_DW.LastUAtTimeA;
    if (MPCSmallSize_DW.TimeStampA < MPCSmallSize_DW.TimeStampB) {
        if (MPCSmallSize_DW.TimeStampB < %<(SLibCG_SE(LibGetT()))>) {
            currentTime = MPCSmallSize_DW.TimeStampB;
            lastU = &MPCSmallSize_DW.LastUAtTimeB;
        }
    } else {
        if (MPCSmallSize_DW.TimeStampA >= %<(SLibCG_SE(LibGetT()))>) {
            currentTime = MPCSmallSize_DW.TimeStampB;
            lastU = &MPCSmallSize_DW.LastUAtTimeB;
        }
    }
    MPCSmallSize_B.Derivative = (MPCSmallSize_P.PHIref_Value - *lastU) / (%<(SLibCG_SE(LibGetT()))> - currentTime);
}
/* End of Derivative: '<Root>/Derivative' */
if (%<(SLibCGIRIsSampleHit(2, 1))>) {
    /* SignalConversion: '<S1>/TmpSignal ConversionAtControladorInport1' incorporates:
 *  Constant: '<Root>/PHIref'
 *  Constant: '<Root>/Xref'
 *  Constant: '<Root>/Yref'
 */
    MPCSmallSize_B.TmpSignalConversionAtControlado[0] = MPCSmallSize_P.Xref_Value;
    MPCSmallSize_B.TmpSignalConversionAtControlado[1] = MPCSmallSize_P.Yref_Value;
    MPCSmallSize_B.TmpSignalConversionAtControlado[2] = MPCSmallSize_P.PHIref_Value;
    MPCSmallSize_B.TmpSignalConversionAtControlado[3] = MPCSmallSize_B.Sum3[0];
    MPCSmallSize_B.TmpSignalConversionAtControlado[6] = rtb_uk1_idx_0;
    MPCSmallSize_B.TmpSignalConversionAtControlado[4] = MPCSmallSize_B.Sum3[1];
    MPCSmallSize_B.TmpSignalConversionAtControlado[7] = rtb_uk1_idx_1;
    MPCSmallSize_B.TmpSignalConversionAtControlado[5] = MPCSmallSize_B.Sum3[2];
    MPCSmallSize_B.TmpSignalConversionAtControlado[8] = rtb_uk1_idx_2;
    MPCSmallSize_B.TmpSignalConversionAtControlado[9] = MPCSmallSize_B.Derivative;
%if !WHITE_SPACE(tlcOutputsFcnOfS1B5)
    /* S-Function (mpc_ss_du_mimo): '<S1>/Controlador' */
%<tlcOutputsFcnOfS1B5>\
%endif
    /* Sum: '<S1>/Sum1' */
    MPCSmallSize_B.uk[0] = MPCSmallSize_B.duk[0] + rtb_uk1_idx_0;
    MPCSmallSize_B.uk[1] = MPCSmallSize_B.duk[1] + rtb_uk1_idx_1;
    MPCSmallSize_B.uk[2] = MPCSmallSize_B.duk[2] + rtb_uk1_idx_2;
%if !WHITE_SPACE(tlcOutputsFcnOfS1B6)
    /* Scope: '<Root>/V (em x) (amarelo) Vn (em y) (roxo) W (em phi) (azul)' */
%<tlcOutputsFcnOfS1B6>\
%endif
}
/* Step: '<Root>/Perturbação de Entrada Vn em y' */
currentTime = %<(SLibCG_SE(LibGetTaskTime(0)))>;
/* Step: '<Root>/Perturbação de Entrada V em x' */
currentTime_0 = %<(SLibCG_SE(LibGetTaskTime(0)))>;
/* Step: '<Root>/Perturbação de Entrada W angular' */
currentTime_1 = %<(SLibCG_SE(LibGetTaskTime(0)))>;
/* Step: '<Root>/Perturbação de Entrada V em x' */
if (currentTime_0 < MPCSmallSize_P.PerturbaodeEntradaVemx_Time) {
    currentTime_0 = MPCSmallSize_P.PerturbaodeEntradaVemx_Y0;
} else {
    currentTime_0 = MPCSmallSize_P.PerturbaodeEntradaVemx_YFinal;
}
/* Sum: '<Root>/Sum1' incorporates:
 *  Gain: '<Root>/  '
 */
MPCSmallSize_B.Sum1[0] = MPCSmallSize_P._Gain_k * currentTime_0 + MPCSmallSize_B.uk[0];
/* Step: '<Root>/Perturbação de Entrada Vn em y' */
if (currentTime < MPCSmallSize_P.PerturbaodeEntradaVnemy_Time) {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaVnemy_Y0;
} else {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaVnemy_YFinal;
}
/* Sum: '<Root>/Sum1' incorporates:
 *  Gain: '<Root>/ '
 */
MPCSmallSize_B.Sum1[1] = MPCSmallSize_P._Gain * currentTime + MPCSmallSize_B.uk[1];
/* Step: '<Root>/Perturbação de Entrada W angular' */
if (currentTime_1 < MPCSmallSize_P.PerturbaodeEntradaWangular_Time) {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaWangular_Y0;
} else {
    currentTime = MPCSmallSize_P.PerturbaodeEntradaWangular_YFin;
}
/* Sum: '<Root>/Sum1' incorporates:
 *  Gain: '<Root>/ 1'
 */
MPCSmallSize_B.Sum1[2] = MPCSmallSize_P.u_Gain_c * currentTime + MPCSmallSize_B.uk[2];
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 4, fcnProtoType)>
%endfunction
